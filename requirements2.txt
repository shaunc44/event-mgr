-- ---
-- Globals
-- ---

-- SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";
-- SET FOREIGN_KEY_CHECKS=0;

-- ---
-- Table 'users'
-- 
-- ---


***************************************************************************
*************************   SET UP SQL TABLES   ***************************
***************************************************************************

DROP TABLE IF EXISTS `event_mgr`.`users`;
		
CREATE TABLE `event_mgr`.`users` (
  `user_id` BIGINT NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(50) NOT NULL,
  `password` VARCHAR(1000) NOT NULL,
  PRIMARY KEY (`user_id`)
);


ALTER TABLE  `event_mgr`.`users`
MODIFY `password` VARCHAR(1000);


-- ---
-- Table 'events'
-- -- ---

DROP TABLE IF EXISTS `event_mgr`.`events`;
		
CREATE TABLE `event_mgr`.`events` (
  `event_id` BIGINT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(50) NOT NULL,
  `description` VARCHAR(50) NOT NULL,
  `location` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`event_id`)
);


-- ---
-- Table 'users_events'
-- -- ---

DROP TABLE IF EXISTS `event_mgr`.`users_events`;
		
CREATE TABLE `event_mgr`.`users_events` (
  `ue_id` BIGINT NOT NULL AUTO_INCREMENT,
  `user_id` BIGINT NOT NULL,
  `event_id` BIGINT NOT NULL,
  `date` DATE NOT NULL,
  PRIMARY KEY (`ue_id`)
);


DROP TABLE IF EXISTS `event_mgr`.`users_events`;
    
CREATE TABLE `event_mgr`.`users_events` (
  `ue_id` BIGINT NOT NULL AUTO_INCREMENT,
  `user_id` BIGINT NOT NULL,
  `event_id` BIGINT NOT NULL,
  `date` DATE NOT NULL,
  CONSTRAINT PK_users_events PRIMARY KEY (`ue_id`),
  FOREIGN KEY (user_id) REFERENCES users (user_id),
  FOREIGN KEY (event_id) REFERENCES events (event_id)
);


-- ---
-- Foreign Keys 
-- ---

ALTER TABLE users_events 
ADD CONSTRAINT FK_users_events 
FOREIGN KEY (user_id) REFERENCES users (user_id) 
ON UPDATE CASCADE
ON DELETE CASCADE;

ALTER TABLE users_events 
ADD CONSTRAINT FK_users_events2 
FOREIGN KEY (event_id) REFERENCES events (event_id) 
ON UPDATE CASCADE
ON DELETE CASCADE;


-- ---
-- Table Properties
-- ---

-- ALTER TABLE `users` ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
-- ALTER TABLE `events` ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
-- ALTER TABLE `users_events` ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- ---
-- Test Data
-- ---

-- INSERT INTO `users` (`user_id`,`email`,`password`) VALUES
-- ('','','');
-- INSERT INTO `events` (`event_id`,`title`,`description`,`location`) VALUES
-- ('','','','');
-- INSERT INTO `users_events` (`ue_id`,`user_id`,`event_id`,`date`) VALUES
-- ('','','','');


***************************************************************************
*******  STORED PROCEDURE TO ADD/CHECK USER EMAIL & PW TO DATABASE  *******
***************************************************************************

DROP PROCEDURE IF EXISTS sp_createUser;

DELIMITER $$
CREATE DEFINER=`shaun`@`localhost` PROCEDURE `sp_createUser`(
    IN p_email VARCHAR(50),
    IN p_password VARCHAR(1000)
)
BEGIN
    if ( select exists (select 1 from users where email = p_email) ) THEN
        select 'Email Address Exists!!';
    ELSE
        insert into users
        (
            email,
            password
        )
        values
        (
            p_email,
            p_password
        );

    END IF;
END$$
DELIMITER ;


***************************************************************************
*************  STORED PROCEDURE TO VALIDATE USER IN DATABASE  *************
***************************************************************************

DROP PROCEDURE IF EXISTS sp_validateLogin;

DELIMITER $$
CREATE DEFINER=`shaun`@`localhost` PROCEDURE `sp_validateLogin`(
IN p_email VARCHAR(50)
)
BEGIN
    select * from users where email = p_email;
END$$
DELIMITER ;


***************************************************************************
*************  STORED PROCEDURE TO GET USER_ID FROM DATABASE  *************
***************************************************************************

DELIMITER $$
CREATE DEFINER=`shaun`@`localhost` PROCEDURE `sp_getUserId`(
IN p_email VARCHAR(50)
)
BEGIN
    select user_id from users where email = p_email;
END$$
DELIMITER ;


***************************************************************************
***************  STORED PROCEDURE TO ADD EVENT TO DATABASE  ***************
***************************************************************************

USE `event_mgr`;
DROP procedure IF EXISTS `event_mgr`.`sp_addEvent`;

DELIMITER $$
USE `event_mgr`$$
CREATE DEFINER=`shaun`@`localhost` PROCEDURE `sp_addEvent`(
    IN p_title VARCHAR(50),
    IN p_description VARCHAR(50),
    IN p_location VARCHAR(50)
)
BEGIN
    insert into events
    (
        title,
        description,
        location
    )
    values
    (
        p_title,
        p_description,
        p_location
    );

    select title from events order by event_id desc limit 1;
END$$

DELIMITER ;


***************************************************************************
************  STORED PROCEDURE TO GET EVENT_ID FROM DATABASE  *************
***************************************************************************

USE `event_mgr`;
DROP procedure IF EXISTS `event_mgr`.`sp_getEventId`;

DELIMITER $$
CREATE DEFINER=`shaun`@`localhost` PROCEDURE `sp_getEventId`(
IN p_title VARCHAR(50)
)
BEGIN
    select event_id from events where title = p_title;
END$$

DELIMITER ;


***************************************************************************
****  STORED PROCEDURE TO ADD USER/EVENT TO JOINED TABLE IN DATABASE  *****
***************************************************************************

USE `event_mgr`;
DROP procedure IF EXISTS `event_mgr`.`sp_addUserEvent`;

DELIMITER $$
USE `event_mgr`$$
CREATE DEFINER=`shaun`@`localhost` PROCEDURE `sp_addUserEvent`(
    IN p_user_id BIGINT,
    IN p_event_id BIGINT
)
BEGIN
    insert into users_events
    (
        user_id,
        event_id,
        date
    )
    values
    (
        p_user_id,
        p_event_id,
        NOW()
    );
END$$

DELIMITER ;


***************************************************************************
*******  STORED PROCEDURE TO GET_EVENTS_BY_USER FROM TO DATABASE  *********
***************************************************************************

USE `event_mgr`;
DROP procedure IF EXISTS `sp_getEventsByUser`;
 
DELIMITER $$
USE `event_mgr`$$
CREATE PROCEDURE `sp_getEventsByUser` (
    IN p_user_id BIGINT
)
BEGIN
    select events.title, events.description, events.location from events 
    inner join users on users.user_id = users_events.user_id 
    inner join users_events on users_events.event_id = events.event_id 
    where users_events.user_id = p_user_id;
END$$

DELIMITER ;









